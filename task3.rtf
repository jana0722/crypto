{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import re\
\
def generate_playfair_matrix(keyword):\
    keyword = keyword.upper().replace("J", "I")\
    seen = set()\
    matrix = []\
    \
    for char in keyword + "ABCDEFGHIKLMNOPQRSTUVWXYZ":\
        if char not in seen:\
            seen.add(char)\
            matrix.append(char)\
    \
    return [matrix[i:i+5] for i in range(0, 25, 5)]\
\
def find_position(matrix, letter):\
    for row in range(5):\
        for col in range(5):\
            if matrix[row][col] == letter:\
                return row, col\
    return None\
\
def process_pairs(text):\
    text = re.sub(r'[^A-Z]', '', text.upper().replace("J", "I"))\
    pairs = []\
    i = 0\
    while i < len(text):\
        a = text[i]\
        b = text[i+1] if i+1 < len(text) else 'X'\
        if a == b:\
            pairs.append((a, 'X'))\
            i += 1\
        else:\
            pairs.append((a, b))\
            i += 2\
    return pairs\
\
def encrypt_pair(matrix, a, b):\
    row1, col1 = find_position(matrix, a)\
    row2, col2 = find_position(matrix, b)\
    \
    if row1 == row2:\
        return matrix[row1][(col1+1) % 5] + matrix[row2][(col2+1) % 5]\
    elif col1 == col2:\
        return matrix[(row1+1) % 5][col1] + matrix[(row2+1) % 5][col2]\
    else:\
        return matrix[row1][col2] + matrix[row2][col1]\
\
def decrypt_pair(matrix, a, b):\
    row1, col1 = find_position(matrix, a)\
    row2, col2 = find_position(matrix, b)\
    \
    if row1 == row2:\
        return matrix[row1][(col1-1) % 5] + matrix[row2][(col2-1) % 5]\
    elif col1 == col2:\
        return matrix[(row1-1) % 5][col1] + matrix[(row2-1) % 5][col2]\
    else:\
        return matrix[row1][col2] + matrix[row2][col1]\
\
def encrypt(text, matrix):\
    pairs = process_pairs(text)\
    return ''.join(encrypt_pair(matrix, a, b) for a, b in pairs)\
\
def decrypt(text, matrix):\
    pairs = process_pairs(text)\
    return ''.join(decrypt_pair(matrix, a, b) for a, b in pairs)\
\
def display_matrix(matrix):\
    for row in matrix:\
        print(' '.join(row))\
\
def main():\
    keyword = input("Enter the keyword: ")\
    matrix = generate_playfair_matrix(keyword)\
    print("\\nPlayfair Cipher Matrix:")\
    display_matrix(matrix)\
    \
    choice = input("\\nDo you want to encrypt or decrypt? (e/d): ").lower()\
    text = input("Enter the text: ")\
    \
    if choice == 'e':\
        print("\\nEncrypted text:", encrypt(text, matrix))\
    elif choice == 'd':\
        print("\\nDecrypted text:", decrypt(text, matrix))\
    else:\
        print("Invalid choice!")\
\
if __name__ == "__main__":\
    main()\
}